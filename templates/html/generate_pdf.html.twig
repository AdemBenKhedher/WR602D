{% extends 'base.html.twig' %}

{% block title %}PDF Generator | Advanced Document Creation{% endblock %}

{% block body %}
<div class="pdf-generator">
    <div class="sidebar">
        <div class="logo-container">
            <i class="fas fa-file-pdf"></i>
            <h3>Générateur PDF</h3>
        </div>
        <div class="steps">
            <div class="step active" data-step="1">
                <div class="step-number">1</div>
                <div class="step-text">Choisir la Méthode</div>
            </div>
            <div class="step" data-step="2">
                <div class="step-number">2</div>
                <div class="step-text">Contenu d'Entrée</div>
            </div>
            <div class="step" data-step="3">
                <div class="step-number">3</div>
                <div class="step-text">Générer le PDF</div>
            </div>
        </div>
        <div class="info-box">
            <h4><i class="fas fa-lightbulb"></i> Conseils</h4>
            <p>Pour de meilleurs résultats, assurez-vous que votre HTML est correctement formaté et inclut tous les styles nécessaires.</p>
        </div>
    </div>

    <div class="main-content">
        <div class="header">
            <h1>Générateur PDF Avancé</h1>
            <p>Créez des documents PDF professionnels à partir de HTML en quelques secondes</p>
        </div>

        {{ form_start(form, {'attr': {'class': 'pdf-form'}}) }}
        
        <div class="form-container">
            <div class="form-section active" id="section-1">
                <h2>Sélectionnez Votre Méthode d'Entrée</h2>
                <div class="method-cards">
                    <div class="method-card" data-method="file">
                        <div class="card-icon"><i class="fas fa-file-upload"></i></div>
                        <h3>Télécharger un Fichier HTML</h3>
                        <p>Utiliser un fichier HTML existant depuis votre appareil</p>
                    </div>
                    <div class="method-card" data-method="code">
                        <div class="card-icon"><i class="fas fa-code"></i></div>
                        <h3>Écrire du Code HTML</h3>
                        <p>Saisir du code HTML personnalisé directement</p>
                    </div>
                </div>
                <input type="hidden" name="method" id="methodInput" value="file">
                <div class="navigation-buttons">
                    <button type="button" class="btn-next" disabled>Continuer <i class="fas fa-arrow-right"></i></button>
                </div>
            </div>

            <div class="form-section" id="section-2">
                <h2>Fournir Votre Contenu</h2>
                <div id="fileUploadSection">
                    <div class="file-upload-container">
                        <div class="file-upload-area" id="dropZone">
                            <i class="fas fa-cloud-upload-alt"></i>
                            <p>Glissez et déposez votre fichier HTML ici</p>
                            <p>OU</p>
                            <label for="{{ form.htmlFile.vars.id }}" class="file-select-button">
                                Sélectionner un Fichier
                            </label>
                            {{ form_widget(form.htmlFile, {'attr': {'class': 'hidden-file-input'}}) }}
                            <div class="selected-file-name"></div>
                        </div>
                    </div>
                </div>

                <div id="htmlCodeSection" style="display: none;">
                    <div class="code-editor-container">
                        <div class="editor-toolbar">
                            <button type="button" class="toolbar-button" data-action="bold"><i class="fas fa-bold"></i></button>
                            <button type="button" class="toolbar-button" data-action="italic"><i class="fas fa-italic"></i></button>
                            <button type="button" class="toolbar-button" data-action="heading"><i class="fas fa-heading"></i></button>
                            <button type="button" class="toolbar-button" data-action="list"><i class="fas fa-list"></i></button>
                            <button type="button" class="toolbar-button" data-action="link"><i class="fas fa-link"></i></button>
                            <button type="button" class="toolbar-button" data-action="image"><i class="fas fa-image"></i></button>
                        </div>
                        {{ form_widget(form.htmlCode, {'attr': {'class': 'code-editor', 'placeholder': '<!DOCTYPE html>\n<html>\n<head>\n    <title>Document</title>\n</head>\n<body>\n    <!-- Entrez votre HTML ici -->\n</body>\n</html>'}}) }}
                    </div>
                </div>

                <div class="navigation-buttons">
                    <button type="button" class="btn-prev"><i class="fas fa-arrow-left"></i> Précédent</button>
                    <button type="button" class="btn-next">Continue <i class="fas fa-arrow-right"></i></button>
                </div>
            </div>

            <div class="form-section" id="section-3">
                <h2>Generate Your PDF</h2>
                <div class="settings-section">
                    <h3>Document Settings</h3>
                    <div class="settings-grid">
                        <div class="setting-item">
                            <label>Page Size</label>
                            <select name="pageSize">
                                <option value="A4">A4 (Default)</option>
                                <option value="Letter">Letter</option>
                                <option value="Legal">Legal</option>
                                <option value="Tabloid">Tabloid</option>
                            </select>
                        </div>
                        <div class="setting-item">
                            <label>Orientation</label>
                            <div class="toggle-switch">
                                <input type="radio" name="orientation" id="portrait" value="portrait" checked>
                                <label for="portrait">Portrait</label>
                                <input type="radio" name="orientation" id="landscape" value="landscape">
                                <label for="landscape">Landscape</label>
                            </div>
                        </div>
                        <div class="setting-item">
                            <label>Margins</label>
                            <div class="slider-container">
                                <input type="range" name="margins" min="0" max="50" value="20">
                                <span class="slider-value">20mm</span>
                            </div>
                        </div>
                        <div class="setting-item">
                            <label>Header/Footer</label>
                            <label class="checkbox-container">
                                Include page numbers
                                <input type="checkbox" name="pageNumbers" checked>
                                <span class="checkmark"></span>
                            </label>
                        </div>
                    </div>
                </div>

                <div class="navigation-buttons">
                    <button type="button" class="btn-prev"><i class="fas fa-arrow-left"></i> Previous</button>
                    {{ form_widget(form.submit, {'attr': {'class': 'btn-generate'}}) }}
                </div>
            </div>
        </div>

        {{ form_end(form) }}
    </div>
</div>
{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
<style>
:root {
    --primary:rgb(20, 58, 228);
    --primary-dark:rgb(0, 22, 122);
    --secondary:rgb(11, 48, 99);
    --accent: #ef476f;
    --light: #f8f9fa;
    --dark:rgb(77, 77, 77);
    --shadow: rgba(0, 0, 0, 0.1);
    --transition: all 0.3s ease;
}

.pdf-generator {
    display: flex;
    min-height: calc(100vh - 60px);
    background: #f5f7fa;
    font-family: 'Poppins', sans-serif;
}

/* Sidebar */
.sidebar {
    width: 280px;
    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    color: white;
    padding: 2rem 1.5rem;
    display: flex;
    flex-direction: column;
    box-shadow: 5px 0 15px var(--shadow);
    border-radius: 20px;
}

.logo-container {
    display: flex;
    align-items: center;
    margin-bottom: 3rem;
}

.logo-container i {
    font-size: 2.5rem;
    margin-right: 1rem;
    animation: pulse 2s infinite;
}

.steps {
    margin-bottom: 2rem;
}

.step {
    display: flex;
    align-items: center;
    margin-bottom: 1.5rem;
    opacity: 0.7;
    transition: var(--transition);
}

.step.active {
    opacity: 1;
}

.step-number {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
    font-weight: bold;
}

.step.active .step-number {
    background: white;
    color: var(--primary);
}

.info-box {
    margin-top: auto;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    padding: 1.5rem;
    backdrop-filter: blur(5px);
}

.info-box h4 {
    margin-top: 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

/* Main Content */
.main-content {
    flex: 1;
    padding: 2rem;
    overflow-y: auto;
}

.header {
    text-align: center;
    margin-bottom: 2rem;
}

.header h1 {
    color: var(--dark);
    margin-bottom: 0.5rem;
    font-size: 2.5rem;
    font-weight: 700;
}

.header p {
    color: #6c757d;
    font-size: 1.1rem;
}

/* Form Container */
.form-container {
    background: white;
    border-radius: 15px;
    box-shadow: 0 10px 30px var(--shadow);
    overflow: hidden;
}

.form-section {
    display: none;
    padding: 2.5rem;
}

.form-section.active {
    display: block;
    animation: fadeIn 0.5s ease;
}

.form-section h2 {
    color: var(--dark);
    margin-bottom: 1.5rem;
    text-align: center;
    font-size: 1.8rem;
}

/* Method Selection */
.method-cards {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin: 2rem 0;
}

.method-card {
    width: 200px;
    padding: 1.5rem;
    border-radius: 12px;
    background: var(--light);
    text-align: center;
    cursor: pointer;
    transition: var(--transition);
    border: 2px solid transparent;
}

.method-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px var(--shadow);
}

.method-card.selected {
    border-color: var(--primary);
    background: rgba(67, 97, 238, 0.05);
}

.card-icon {
    font-size: 2.5rem;
    color: var(--primary);
    margin-bottom: 1rem;
}

.method-card h3 {
    margin-bottom: 0.5rem;
    font-size: 1.2rem;
}

.method-card p {
    color: #6c757d;
    font-size: 0.9rem;
}

/* File Upload */
.file-upload-container {
    margin: 2rem auto;
    max-width: 600px;
}

.file-upload-area {
    border: 2px dashed #ced4da;
    border-radius: 12px;
    padding: 3rem 2rem;
    text-align: center;
    transition: var(--transition);
}

.file-upload-area:hover {
    border-color: var(--primary);
}

.file-upload-area i {
    font-size: 3rem;
    color: var(--primary);
    margin-bottom: 1rem;
}

.file-select-button {
    display: inline-block;
    background: var(--primary);
    color: white;
    padding: 0.5rem 1.5rem;
    border-radius: 30px;
    margin-top: 1rem;
    cursor: pointer;
    transition: var(--transition);
}

.file-select-button:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
}

.hidden-file-input {
    display: none;
}

.selected-file-name {
    margin-top: 1rem;
    font-weight: bold;
    color: var(--primary);
}

/* Code Editor */
.code-editor-container {
    margin: 2rem auto;
    max-width: 800px;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 5px 15px var(--shadow);
}

.editor-toolbar {
    background: #f8f9fa;
    padding: 0.5rem;
    border-bottom: 1px solid #dee2e6;
    display: flex;
    gap: 0.5rem;
}

.toolbar-button {
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: var(--transition);
}

.toolbar-button:hover {
    background: #f0f0f0;
}

.code-editor {
    width: 100%;
    min-height: 400px;
    padding: 1rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 14px;
    line-height: 1.5;
    border: none;
    resize: none;
}

/* Settings Section */
.settings-section {
    background: var(--light);
    border-radius: 12px;
    padding: 1.5rem;
    margin: 2rem 0;
}

.settings-section h3 {
    margin-top: 0;
    margin-bottom: 1.5rem;
    font-size: 1.3rem;
    color: var(--dark);
}

.settings-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
}

.setting-item {
    margin-bottom: 1rem;
}

.setting-item label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

.setting-item select,
.setting-item input[type="text"] {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ced4da;
    border-radius: 6px;
}

.toggle-switch {
    display: flex;
    background: #e9ecef;
    border-radius: 30px;
    overflow: hidden;
}

.toggle-switch input {
    display: none;
}

.toggle-switch label {
    flex: 1;
    text-align: center;
    padding: 0.5rem;
    margin: 0;
    cursor: pointer;
    transition: var(--transition);
}

.toggle-switch input:checked + label {
    background: var(--primary);
    color: white;
}

.slider-container {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.slider-container input {
    flex: 1;
}

.checkbox-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    margin: 0;
    user-select: none;
}

.checkbox-container input {
    margin: 0;
}

/* Navigation */
.navigation-buttons {
    display: flex;
    justify-content: space-between;
    margin-top: 2rem;
}

.btn-prev,
.btn-next,
.btn-generate {
    padding: 0.75rem 1.5rem;
    border-radius: 30px;
    border: none;
    cursor: pointer;
    font-weight: 500;
    transition: var(--transition);
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.btn-prev {
    background: #e9ecef;
    color: #495057;
}

.btn-prev:hover {
    background: #dee2e6;
}

.btn-next {
    background: var(--primary);
    color: white;
}

.btn-next:disabled {
    background: #ced4da;
    cursor: not-allowed;
}

.btn-next:not(:disabled):hover {
    background: var(--primary-dark);
}

.btn-generate {
    background: var(--accent);
    color: white;
    font-size: 1.1rem;
}

.btn-generate:hover {
    filter: brightness(1.1);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(239, 71, 111, 0.3);
}

/* Animations */
@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Drag & Drop Highlight */
.dragover {
    background: rgba(67, 97, 238, 0.05);
    border-color: var(--primary) !important;
}

/* Responsive */
@media (max-width: 992px) {
    .pdf-generator {
        flex-direction: column;
    }
    
    .sidebar {
        width: 100%;
        padding: 1.5rem;
    }
    
    .logo-container {
        margin-bottom: 1.5rem;
    }
    
    .steps {
        display: flex;
        justify-content: space-around;
        margin-bottom: 1rem;
    }
    
    .step {
        flex-direction: column;
        text-align: center;
    }
    
    .step-number {
        margin-right: 0;
        margin-bottom: 0.5rem;
    }
    
    .info-box {
        display: none;
    }
}

@media (max-width: 768px) {
    .method-cards {
        flex-direction: column;
        align-items: center;
    }
    
    .method-card {
        width: 100%;
        max-width: 300px;
    }
    
    .navigation-buttons {
        flex-direction: column;
        gap: 1rem;
    }
    
    .btn-prev,
    .btn-next,
    .btn-generate {
        width: 100%;
        justify-content: center;
    }
}
</style>
{% endblock %}

{% block javascripts %}
{{ parent() }}

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Variables
    const methodCards = document.querySelectorAll('.method-card');
    const methodInput = document.getElementById('methodInput');
    const fileUploadSection = document.getElementById('fileUploadSection');
    const htmlCodeSection = document.getElementById('htmlCodeSection');
    const btnNext = document.querySelectorAll('.btn-next');
    const btnPrev = document.querySelectorAll('.btn-prev');
    const sections = document.querySelectorAll('.form-section');
    const steps = document.querySelectorAll('.step');
    const fileInput = document.querySelector('.hidden-file-input');
    const fileNameDisplay = document.querySelector('.selected-file-name');
    const dropZone = document.getElementById('dropZone');
    const sliderInput = document.querySelector('input[type="range"]');
    const sliderValue = document.querySelector('.slider-value');
    
    let currentSection = 0;
    
    // Method selection
    methodCards.forEach(card => {
        card.addEventListener('click', () => {
            // Remove selected class from all cards
            methodCards.forEach(c => c.classList.remove('selected'));
            
            // Add selected class to clicked card
            card.classList.add('selected');
            
            // Update hidden input value
            methodInput.value = card.dataset.method;
            
            // Enable next button
            btnNext[0].removeAttribute('disabled');
        });
    });
    
    // Navigation
    btnNext.forEach((btn, index) => {
        btn.addEventListener('click', () => {
            if (index === 0 && !methodInput.value) return; // Don't proceed if no method selected
            
            sections[currentSection].classList.remove('active');
            steps[currentSection].classList.remove('active');
            currentSection++;
            sections[currentSection].classList.add('active');
            steps[currentSection].classList.add('active');
            
            // Show correct input section based on selected method
            if (currentSection === 1) {
                if (methodInput.value === 'file') {
                    fileUploadSection.style.display = 'block';
                    htmlCodeSection.style.display = 'none';
                } else {
                    fileUploadSection.style.display = 'none';
                    htmlCodeSection.style.display = 'block';
                }
            }
        });
    });
    
    btnPrev.forEach(btn => {
        btn.addEventListener('click', () => {
            sections[currentSection].classList.remove('active');
            steps[currentSection].classList.remove('active');
            currentSection--;
            sections[currentSection].classList.add('active');
            steps[currentSection].classList.add('active');
        });
    });
    
    // File upload handling
    fileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            fileNameDisplay.textContent = e.target.files[0].name;
        }
    });
    
    // Drag and drop
    ['dragover', 'dragenter'].forEach(event => {
        dropZone.addEventListener(event, (e) => {
            e.preventDefault();
            dropZone.classList.add('dragover');
        });
    });
    
    ['dragleave', 'dragend', 'drop'].forEach(event => {
        dropZone.addEventListener(event, (e) => {
            e.preventDefault();
            dropZone.classList.remove('dragover');
        });
    });
    
    dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        if (e.dataTransfer.files.length > 0) {
            fileInput.files = e.dataTransfer.files;
            fileNameDisplay.textContent = e.dataTransfer.files[0].name;
        }
    });
    
    // Slider value update
    sliderInput.addEventListener('input', () => {
        sliderValue.textContent = sliderInput.value + 'mm';
    });
    
    // Editor toolbar functionality
    const toolbarButtons = document.querySelectorAll('.toolbar-button');
    const codeEditor = document.querySelector('.code-editor');
    
    toolbarButtons.forEach(button => {
        button.addEventListener('click', () => {
            const action = button.dataset.action;
            const startPos = codeEditor.selectionStart;
            const endPos = codeEditor.selectionEnd;
            const selectedText = codeEditor.value.substring(startPos, endPos);
            
            let insertion = '';
            
            switch(action) {
                case 'bold':
                    insertion = `<strong>${selectedText}</strong>`;
                    break;
                case 'italic':
                    insertion = `<em>${selectedText}</em>`;
                    break;
                case 'heading':
                    insertion = `<h2>${selectedText}</h2>`;
                    break;
                case 'list':
                    insertion = `<ul>\n  <li>${selectedText || 'List item'}</li>\n  <li>List item</li>\n</ul>`;
                    break;
                case 'link':
                    insertion = `<a href="#">${selectedText || 'Link text'}</a>`;
                    break;
                case 'image':
                    insertion = `<img src="image.jpg" alt="${selectedText || 'Image description'}" />`;
                    break;
            }
            
            codeEditor.value = codeEditor.value.substring(0, startPos) + insertion + codeEditor.value.substring(endPos);
            codeEditor.focus();
        });
    });
});
</script>
{% endblock %}
